Replace node with depth
Send Feedback
In a given Generic Tree, replace each node with its depth value. You need to just update the data of each node, no need to return or print anything.
Input format :

Line 1 : Elements in level order form separated by space (as per done in class). Order is -

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element

Sample Input 1 :
10 3 20 30 40 2 40 50 0 0 0 0 
Sample Output 1 : (Level wise, each level in new line)
0 
1 1 1 
2 2


//Main Code


import java.util.Queue;
import java.util.LinkedList;
public class Solution {

/*	TreeNode structure 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
	
	public static void replaceWithDepthValue(TreeNode<Integer> root){
        if(root==null)
        {
            return;
        }
        Queue<TreeNode<Integer>> Queue_of_Treenode = new LinkedList<TreeNode<Integer>>();
        Queue_of_Treenode.add(root);
        int countchild=1;
        int level=0;
        while(!Queue_of_Treenode.isEmpty())
        {  
            int size=Queue_of_Treenode.size();
            
            while(size!=0){
                size--;
            TreeNode<Integer> node=  Queue_of_Treenode.poll();
                node.data=level;
          //      System.out.print(node.data+" ");
            
       //     System.out.print(node.data);
            for(int i =0; i<node.children.size();i++)
            {
                Queue_of_Treenode.add(node.children.get(i));
                
            }        
           
            }
             level++;
           // System.out.println();
        }
		/* Your class should be named Solution 
 		 * Don't write main(). 
		 * Don't read input, it is passed as function argument. 
		 * Print output and don't return it. 
		 * Taking input is handled automatically. 
		 */

		// Write your code here
		
	}
	
	
}
